<!DOCTYPE html>
<html>
<head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map {
            height: 100%;
        }

        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 90%;
            margin: 0;
            padding: 0;
        }
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
</head>
<body>
<div>
    <h1>That Map</h1>
    <form>
        <p>
            <label for="cuisines">Cuisine: </label><select id="cuisines">
                <option value="all">All</option>
            </select>
        </p>
    </form>
</div>
<div id="map"></div>
<script>

    let map;
    let markers = [];

    function initMap() {

        let initLat = 40.848447;
        let initLng = -73.856077;

        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: initLat, lng: initLng},
            zoom: 16
        });
    }

    function updateRestaurants(lat, lon) {
        // TODO: Some useful things should be done here
    }


    /**
     * Useful utilities to display restaurants markers here
     */

    // Adds a marker to the map and push to the array.
    function addMarker(restaurant) {
        let contentString = '<div id="content">' +
            "<strong>" + restaurant.name + "</strong>" +
            '<br>' +
            restaurant.cuisine +
            '<br>' + +
                restaurant.address.building + " " + restaurant.address.street + ", " + restaurant.borough +
            '</div>';

        let infowindow = new google.maps.InfoWindow({
            content: contentString
        });


        let marker = new google.maps.Marker({
            position: new google.maps.LatLng(
                restaurant.address.coord[1],
                restaurant.address.coord[0]
            ),
            map: map
        });

        marker.addListener('click', function () {
            infowindow.open(map, marker);
        });

        markers.push(marker);
    }

    // Sets the map on all markers in the array.
    function setMapOnAll(map) {
        for (let i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    // Removes the markers from the map, but keeps them in the array.
    function clearMarkers() {
        setMapOnAll(null);
    }

    // Shows any markers currently in the array.
    function showMarkers() {
        setMapOnAll(map);
    }

    // Deletes all markers in the array by removing references to them.
    function deleteMarkers() {
        clearMarkers();
        markers = [];
    }


    /**
     * Small example of polling an API
     * Updating the cuisines select box
     */
    function updateCuisinesSelect() {
        $.get("http://localhost:8081/cuisines", function (data, status) {
            data.cuisines.forEach(function (value, index) {
                $('#cuisines').append($('<option>', {
                    value: value,
                    text: value
                }));
            });
        });
    }

    updateCuisinesSelect();

    /**
     * When the select box changes value, we want to change
     * the restaurants displayed on the map
     */
    $("#cuisines").change(function () {
        let lat = map.data.map.center.lat();
        let lng = map.data.map.center.lng();
        updateRestaurants(lat, lng)
    });

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCXlcOYk3fPdDJfxdPCWoHFkBX4aYspl2A&callback=initMap"
        async defer></script>

</body>
</html>
